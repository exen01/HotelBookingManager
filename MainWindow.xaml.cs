using HotelBookingManager.dao.client;
using HotelBookingManager.dao.room;
using HotelBookingManager.dao.roomType;
using HotelBookingManager.domain.dto;
using HotelBookingManager.GUI;
using HotelBookingManager.GUI.room;
using HotelBookingManager.service.client;
using HotelBookingManager.service.room;
using HotelBookingManager.service.roomType;
using HotelBookingManager.util.db;
using HotelBookingManager.util.statusConverter;
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;

namespace HotelBookingManager
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private DBConnection connection;
        private List<Client> clients;
        private List<Booking> bookings;
        private List<Room> rooms;
        private IClientService clientService;
        private IRoomService roomService;
        private IRoomTypeService roomTypeService;

        public MainWindow()
        {
            connection = DBConnection.Instance();
            clientService = new ClientServiceImpl(new ClientDaoImpl(connection));
            roomService = new RoomServiceImpl(new RoomDaoImpl(connection));
            roomTypeService = new RoomTypeServiceImpl(new RoomTypeDaoImpl(connection));

            InitializeComponent();
            InitializeForm();
        }

        private void InitializeForm()
        {
            refreshClientList();
            refreshRoomList();
        }

        private void refreshClientList()
        {
            clients = clientService.GetAllClients();
            clientDataGrid.ItemsSource = clients;
        }

        private void refreshRoomList()
        {
            rooms = roomService.GetAllRooms();
            roomDataGrid.ItemsSource = rooms;
        }

        private void clientDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            clientDataGrid.Columns[0].Visibility = Visibility.Hidden;
            clientDataGrid.Columns[1].Header = "ФИО";
            clientDataGrid.Columns[2].Header = "Адрес";
            clientDataGrid.Columns[3].Header = "E-mail";
            clientDataGrid.Columns[4].Header = "Телефон";
        }

        private void addClientButton_Click(object sender, RoutedEventArgs e)
        {
            Client client = new Client();

            ClientCreateWindow clientProfileWindow = new ClientCreateWindow(true, client, clientService);
            var result = clientProfileWindow.ShowDialog();

            if (result == true)
            {
                clientService.AddClient(client);
                refreshClientList();
            }
        }

        private void editClientButton_Click(object sender, RoutedEventArgs e)
        {
            if (clientDataGrid.SelectedItem != null)
            {
                Client client = (Client)clientDataGrid.SelectedItem;
                ClientCreateWindow clientProfileWindow = new ClientCreateWindow(false, client, clientService);
                var result = clientProfileWindow.ShowDialog();

                if (result == true)
                {
                    clientService.UpdateClient(client);
                    refreshClientList();
                }
            }
        }

        private void deleteClientButton_Click(object sender, RoutedEventArgs e)
        {
            if (clientDataGrid.SelectedItem != null)
            {
                Client client = (Client)clientDataGrid.SelectedItem;
                MessageBoxResult messageBoxResult = MessageBox.Show("Вы действительно хотите удалить запись?", "Подтверждение удаления", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (messageBoxResult == MessageBoxResult.Yes)
                {
                    clientService.DeleteClientById(client.Id);
                    refreshClientList();
                }
            }
        }

        private void refreshClientButton_Click(object sender, RoutedEventArgs e)
        {
            refreshClientList();
        }

        private void roomDataGrid_AutoGeneratedColumns(object sender, EventArgs e)
        {
            roomDataGrid.Columns[0].Visibility = Visibility.Hidden;
            roomDataGrid.Columns[1].Header = "Номер";
            roomDataGrid.Columns[2].Visibility = Visibility.Hidden;
            roomDataGrid.Columns[3].Header = "Тип";
            roomDataGrid.Columns[4].Header = "Стоимость (Сутки)";
            roomDataGrid.Columns[5].Header = "Статус";
            roomDataGrid.Columns[6].Header = "Описание";
            roomDataGrid.Columns[6].Width = 300;

            ApplyCellStyle();
        }

        private void roomDataGrid_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyName == "Availability")
            {
                DataGridTextColumn column = e.Column as DataGridTextColumn;
                column.Binding = new Binding("Availability")
                {
                    Converter = new StatusConverter()
                };
            }
        }

        private void ApplyCellStyle()
        {
            Style cellStyle = new Style(typeof(DataGridCell));

            // Установите привязку фона ячейки к свойству Status
            cellStyle.Setters.Add(new Setter(BackgroundProperty, new Binding("Availability")
            {
                Converter = new StatusToBackgroundConverter()
            }));

            cellStyle.Setters.Add(new Setter(VerticalContentAlignmentProperty, VerticalAlignment.Center));
            cellStyle.Setters.Add(new Setter(HorizontalContentAlignmentProperty, HorizontalAlignment.Center));
            cellStyle.Setters.Add(new Setter(ForegroundProperty, Brushes.Black));


            DataGridColumn column = roomDataGrid.Columns[5];
            column.CellStyle = cellStyle;

        }

        private void refreshRoomButton_Click(object sender, RoutedEventArgs e)
        {
            refreshRoomList();
        }

        private void deleteRoomButton_Click(object sender, RoutedEventArgs e)
        {
            if (roomDataGrid.SelectedItem != null)
            {
                Room room = (Room)roomDataGrid.SelectedItem;
                MessageBoxResult messageBoxResult = MessageBox.Show("Вы действительно хотите удалить запись?", "Подтверждение удаления", MessageBoxButton.YesNo, MessageBoxImage.Warning);
                if (messageBoxResult == MessageBoxResult.Yes)
                {
                    roomService.DeleteRoomById(room.Id);
                    refreshRoomList();
                }
            }
        }

        private void addRoomButton_Click(object sender, RoutedEventArgs e)
        {
            Room room = new Room();

            RoomCreateWindow roomCreateWindow = new RoomCreateWindow(true, room, roomTypeService, roomService);
            bool? result = roomCreateWindow.ShowDialog();

            if (result == true)
            {
                roomService.AddRoom(room);
                refreshRoomList();
            }
        }

        private void editRoomButton_Click(object sender, RoutedEventArgs e)
        {
            if (roomDataGrid.SelectedItem != null)
            {
                Room room = (Room)roomDataGrid.SelectedItem;
                RoomCreateWindow roomCreateWindow = new RoomCreateWindow(false, room, roomTypeService, roomService);
                bool? result = roomCreateWindow.ShowDialog();

                if (result == true)
                {
                    roomService.UpdateRoom(room);
                    refreshRoomList();
                }
            }
        }
    }
}
